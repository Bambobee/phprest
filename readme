What is API?

->Application Programming Interface
->API are Everywhere
->Contract provided by one piece of software to another
->Structure request and response

What is Rest?

->Representational State Transfer
->Architecture style for designing networked Application
->Relies on a stateless, client-server Protocol, almost always HTTP
->Treats server onbjects as resources that can be created or destroyed
->can be used by virtual any programming language

HTTP METHODS

->GET: Retrieve data from a specifed resource
->POST: Submit data to be processed to a specified resource
->PUT: update a specified resource
->DELETE: delete a specified resource
->HEAD, OPTIONS, PATCH


End points 
The URI/URL where api/service can be accessed by a client application

example

GET  https://mysite.com/api/users
GET  https://mysite.com/api/users/1
POST  https://mysite.com/api/users
PUT  https://mysite.com/api/users/1
DELETE  https://mysite.com/api/users/1


https://jwt.io/introduction
https://github.com/firebase/php-jwt
https://jwt.io/ for testing your key

composer require firebase/php-jwt

JWT -> Json Web Tokens 
It is aa open standard (RCF 7519) that defines a compact and self-contained way of security transimitting information btn parties as JSON objects 

Why should we use JSON web tokens 
->Authentication -> This is the most common scenario for using JWT. Once the user is logged in, each subsequence request will include the JWT 

->Informartion Exchange -> JWT are the gud ways of security transimitting inforntion btn parties.

WHat is JWT structure?

It consists of 3 parts all seperated by dots
->Header
->Payload
->Signature

api token 


project-root/
│
├── api/
│   ├── index.php              # Entry point for the API
│
├── app/
│   ├── controllers/           # API controllers (e.g., Api.php)
│   │   └── Api.php
│   ├── models/                # Database models (e.g., Customer.php, DbConnect.php)
│   │   ├── DbConnect.php
│   │   └── Customer.php
│   ├── libraries/             # Core libraries (e.g., Rest.php)
│   │   └── Rest.php
│   ├── helpers/               # Helper functions and utilities
│   │   └── functions.php
│   └── constants.php          # Application constants
│
├── config/                    # Configuration files
│   └── database.php           # Database configuration
│
├── vendor/                    # Composer dependencies (autoloaded)
│
└── public/                    # Publicly accessible files (e.g., assets, frontend)
    └── index.php              # Frontend entry point (if applicable)


     {/* <p className="break-all">Token: {token}</p> */}